[{"title":"linux 虚拟内存实践3","time":"2016-10-30 10:04:58","notebook":"服务器","_key":2,"id":"20161111","html":"<h1 id=\"-\">思路解释</h1>\n<blockquote>\n<p>转盘抽奖，就是像这样子的转盘。（如下图）\n点击中间的“点击抽奖”按钮，然后后面的圆形转盘开始转动，最后停在所在结果里。</p>\n</blockquote>\n<p><img src=\"http://api.jasonff.top/dist/20161111_0.png\" alt=\"Paste_Image.png\"></p>\n<h2 id=\"-\">如何实现旋转并且让指针指向目标区域？</h2>\n<blockquote>\n<p>我这里的思路是用css3的一些功能，为了能够写的便捷，我用了sass工具进行编译。</p>\n</blockquote>\n<pre><code>\n$get1: - (120deg+180deg)/2 + 5400deg;\n$get2: - (225deg+180deg)/2 + 5400deg;\n$get5: - (225deg+270deg)/2 + 5400deg;\n$get10: - (45deg+90deg)/2 + 5400deg;\n$get20: - (0deg+45deg)/2 + 5400deg;\n$get50: - (360deg+334deg)/2 + 5400deg;\n$get100: - (308deg+334deg)/2 + 5400deg;\n\n// 这里的角度，都是转盘图片中，各个区域的角度，最终将指针指向每个扇形的中心。\n// 5400deg 是转的圈数\n\n$timing: cubic-bezier(0,0,0,1);\n\n@mixin transformRotate($deg) {\n  transform:rotate($deg);\n  -ms-transform:rotate($deg); /* Internet Explorer */\n  -moz-transform:rotate($deg); /* Firefox */\n  -webkit-transform:rotate($deg); /* Safari 和 Chrome */\n  -o-transform:rotate($deg); /* Opera */\n}\n@mixin getAnimation($attribute) {\n  animation: #{$attribute};\n  -moz-animation: #{$attribute};    /* Firefox */\n  -webkit-animation: #{$attribute};    /* Safari 和 Chrome */\n  -o-animation: #{$attribute};    /* Opera */\n}\n\n@mixin keyframes($animationname, $get) {\n  @keyframes #{$animationname}\n  {\n    100% {\n      @include transformRotate($get);\n    }\n  }\n  @-moz-keyframes #{$animationname} /* Firefox */\n  {\n    100% {\n      @include transformRotate($get);\n    }\n  }\n  @-webkit-keyframes #{$animationname} /* Safari 和 Chrome */\n  {\n    100% {\n      @include transformRotate($get);\n    }\n  }\n  @-o-keyframes #{$animationname} /* Opera */\n  {\n    100% {\n      @include transformRotate($get);\n    }\n  }\n}\n\n@include keyframes(Kget1, $get1);\n@include keyframes(Kget2, $get2);\n@include keyframes(Kget5, $get5);\n@include keyframes(Kget10, $get10);\n@include keyframes(Kget20, $get20);\n@include keyframes(Kget50, $get50);\n@include keyframes(Kget100, $get100);\n\n.get1 {\n  @include getAnimation(&#39;Kget1 10s #{$timing} forwards&#39;);\n}\n// forwards 属性是为了在动画结束的时候不再跳回初始的状态\n.get2 {\n  @include getAnimation(&#39;Kget2 10s #{$timing} forwards&#39;);\n}\n.get5 {\n  @include getAnimation(&#39;Kget5 10s #{$timing} forwards&#39;);\n}\n.get10 {\n  @include getAnimation(&#39;Kget10 10s #{$timing} forwards&#39;);\n}\n.get20 {\n  @include getAnimation(&#39;Kget20 10s #{$timing} forwards&#39;);\n}\n.get50 {\n  @include getAnimation(&#39;Kget50 10s #{$timing} forwards&#39;);\n}\n.get100 {\n  @include getAnimation(&#39;Kget100 10s #{$timing} forwards&#39;);\n}\n</code></pre><h2 id=\"-cubic-bezier-\">下面主要对 cubic-bezier 属性进行一些注释</h2>\n<p><img src=\"http://api.jasonff.top/dist/20161111_1.png\" alt=\"Paste_Image.png\"></p>\n<blockquote>\n<p>cubic-bezier即为贝兹曲线中的绘制方法。图上有四点，P0-3，其中P0、P3是默认的点，对应了[0,0], [1,1]。而剩下的P1、P2两点则是我们通过cubic-bezier()自定义的。cubic-bezier(x1, y1, x2, y2) 为自定义，x1,x2,y1,y2的值范围在[0, 1]。\n    预留的几个特效：\n    ease: cubic-bezier(0.25, 0.1, 0.25, 1.0)\n    linear: cubic-bezier(0.0, 0.0, 1.0, 1.0)\n    ease-in: cubic-bezier(0.42, 0, 1.0, 1.0)\n    ease-out: cubic-bezier(0, 0, 0.58, 1.0)\n    ease-in-out: cubic-bezier(0.42, 0, 0.58, 1.0)\n也就是说第四个n是y2，和x2共同决定P2的位置</p>\n</blockquote>\n"},{"title":"linux 虚拟内存实践2","time":"2016-10-30 10:04:58","notebook":"服务器","_key":1,"id":"20161026","html":"<h1 id=\"linux-\">linux 虚拟内存实践</h1>\n<ul>\n<li><p>查看 Swap 大小</p>\n<pre><code>free -m\n</code></pre></li>\n<li><p>创建一个 Swap 文件</p>\n<pre><code>mkdir swap\ncd swap\nsudo dd if=/dev/zero of=swapfile bs=1024 count=100000\n</code></pre><blockquote>\n<p>count 代表文件的大小</p>\n</blockquote>\n</li>\n<li><p>把生成的文件转换成 Swap 文件</p>\n<pre><code>sudo mkswap swapfile\n</code></pre></li>\n<li><p>激活 Swap 文件</p>\n<pre><code>sudo swapon swapfile\n</code></pre><blockquote>\n<p>再次查看 free -m 发现添加成功了</p>\n</blockquote>\n</li>\n<li><p>卸载 Swap</p>\n<pre><code>sudo swapoff swapfile\n</code></pre><blockquote>\n<p>进入刚才那个目录</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"linux 虚拟内存实践1","time":"2016-10-30 10:04:58","notebook":"服务器","_key":0,"id":"20160606","html":"<h1 id=\"-\">思路解释</h1>\n<blockquote>\n<p>转盘抽奖，就是像这样子的转盘。（如下图）\n点击中间的“点击抽奖”按钮，然后后面的圆形转盘开始转动，最后停在所在结果里。</p>\n</blockquote>\n<p><img src=\"http://api.jasonff.top/dist/20160606_0.png\" alt=\"Paste_Image.png\"></p>\n<h2 id=\"-\">如何实现旋转并且让指针指向目标区域？</h2>\n<blockquote>\n<p>我这里的思路是用css3的一些功能，为了能够写的便捷，我用了sass工具进行编译。</p>\n</blockquote>\n<pre><code>\n$get1: - (120deg+180deg)/2 + 5400deg;\n$get2: - (225deg+180deg)/2 + 5400deg;\n$get5: - (225deg+270deg)/2 + 5400deg;\n$get10: - (45deg+90deg)/2 + 5400deg;\n$get20: - (0deg+45deg)/2 + 5400deg;\n$get50: - (360deg+334deg)/2 + 5400deg;\n$get100: - (308deg+334deg)/2 + 5400deg;\n\n// 这里的角度，都是转盘图片中，各个区域的角度，最终将指针指向每个扇形的中心。\n// 5400deg 是转的圈数\n\n$timing: cubic-bezier(0,0,0,1);\n\n@mixin transformRotate($deg) {\n  transform:rotate($deg);\n  -ms-transform:rotate($deg); /* Internet Explorer */\n  -moz-transform:rotate($deg); /* Firefox */\n  -webkit-transform:rotate($deg); /* Safari 和 Chrome */\n  -o-transform:rotate($deg); /* Opera */\n}\n@mixin getAnimation($attribute) {\n  animation: #{$attribute};\n  -moz-animation: #{$attribute};    /* Firefox */\n  -webkit-animation: #{$attribute};    /* Safari 和 Chrome */\n  -o-animation: #{$attribute};    /* Opera */\n}\n\n@mixin keyframes($animationname, $get) {\n  @keyframes #{$animationname}\n  {\n    100% {\n      @include transformRotate($get);\n    }\n  }\n  @-moz-keyframes #{$animationname} /* Firefox */\n  {\n    100% {\n      @include transformRotate($get);\n    }\n  }\n  @-webkit-keyframes #{$animationname} /* Safari 和 Chrome */\n  {\n    100% {\n      @include transformRotate($get);\n    }\n  }\n  @-o-keyframes #{$animationname} /* Opera */\n  {\n    100% {\n      @include transformRotate($get);\n    }\n  }\n}\n\n@include keyframes(Kget1, $get1);\n@include keyframes(Kget2, $get2);\n@include keyframes(Kget5, $get5);\n@include keyframes(Kget10, $get10);\n@include keyframes(Kget20, $get20);\n@include keyframes(Kget50, $get50);\n@include keyframes(Kget100, $get100);\n\n.get1 {\n  @include getAnimation(&#39;Kget1 10s #{$timing} forwards&#39;);\n}\n// forwards 属性是为了在动画结束的时候不再跳回初始的状态\n.get2 {\n  @include getAnimation(&#39;Kget2 10s #{$timing} forwards&#39;);\n}\n.get5 {\n  @include getAnimation(&#39;Kget5 10s #{$timing} forwards&#39;);\n}\n.get10 {\n  @include getAnimation(&#39;Kget10 10s #{$timing} forwards&#39;);\n}\n.get20 {\n  @include getAnimation(&#39;Kget20 10s #{$timing} forwards&#39;);\n}\n.get50 {\n  @include getAnimation(&#39;Kget50 10s #{$timing} forwards&#39;);\n}\n.get100 {\n  @include getAnimation(&#39;Kget100 10s #{$timing} forwards&#39;);\n}\n</code></pre><h2 id=\"-cubic-bezier-\">下面主要对 cubic-bezier 属性进行一些注释</h2>\n<p><img src=\"http://api.jasonff.top/dist/20160606_1.png\" alt=\"Paste_Image.png\"></p>\n<blockquote>\n<p>cubic-bezier即为贝兹曲线中的绘制方法。图上有四点，P0-3，其中P0、P3是默认的点，对应了[0,0], [1,1]。而剩下的P1、P2两点则是我们通过cubic-bezier()自定义的。cubic-bezier(x1, y1, x2, y2) 为自定义，x1,x2,y1,y2的值范围在[0, 1]。\n    预留的几个特效：\n    ease: cubic-bezier(0.25, 0.1, 0.25, 1.0)\n    linear: cubic-bezier(0.0, 0.0, 1.0, 1.0)\n    ease-in: cubic-bezier(0.42, 0, 1.0, 1.0)\n    ease-out: cubic-bezier(0, 0, 0.58, 1.0)\n    ease-in-out: cubic-bezier(0.42, 0, 0.58, 1.0)\n也就是说第四个n是y2，和x2共同决定P2的位置</p>\n</blockquote>\n"}]